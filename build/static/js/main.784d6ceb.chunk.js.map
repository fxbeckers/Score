{"version":3,"sources":["App.tsx","reportWebVitals.js","index.tsx"],"names":["LineItem","children","Box","display","justifyContent","p","ControlledSelect","field","label","options","name","defaultValue","rules","required","render","FormControl","fullWidth","InputLabel","Select","value","onChange","e","target","map","opt","MenuItem","ControlledInput","TextField","InputLabelProps","shrink","type","variant","App","methods","useForm","defaultValues","age","asa_score","gender","preop_emoglobin","surgical_indication","treated_hta","useState","score","setScore","doBloodDraw","resultLabel","resultIcon","Fragment","CssBaseline","AppBar","position","Toolbar","Typography","component","sx","flexGrow","onSubmit","handleSubmit","data","roundedScore","Math","round","Container","maxWidth","mb","Paper","my","xs","md","Button","color","onClick","reset","Stack","direction","divider","Divider","orientation","flexItem","spacing","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.784d6ceb.chunk.js","sourcesContent":["import {\n  AppBar,\n  Box,\n  Button,\n  Container,\n  CssBaseline,\n  Divider,\n  FormControl,\n  InputLabel,\n  MenuItem,\n  Paper,\n  Select,\n  Stack,\n  TextField,\n  Toolbar,\n  Typography,\n} from \"@mui/material\";\nimport React, { useState } from \"react\";\nimport { Controller, FormProvider, useForm } from \"react-hook-form\";\nimport DoNotTouchIcon from \"@mui/icons-material/DoNotTouch\";\nimport ScienceIcon from \"@mui/icons-material/Science\";\n\nconst LineItem: React.FC = ({ children }) => {\n  return <Box display=\"flex\" justifyContent=\"space-between\" p={1}>{children}</Box>;\n};\n\ntype FormValues = {\n  age: number;\n  gender: number;\n  surgical_indication: number;\n  asa_score: number;\n  treated_hta: number;\n  preop_emoglobin: number;\n};\n\nconst ControlledSelect: React.FC<{\n  field: keyof FormValues;\n  label: string;\n  options: { label: string; value: any }[];\n}> = ({ field, label, options }) => {\n  return (\n    <Controller\n      name={field}\n      defaultValue={\"\"}\n      rules={{ required: true }}\n      render={({ field }) => (\n        <LineItem>\n          <FormControl fullWidth>\n            <InputLabel>{label}</InputLabel>\n            <Select\n              value={field.value}\n              onChange={(e) => field.onChange(e.target.value)}\n              label={label}\n            >\n              {options.map((opt) => {\n                return (\n                  <MenuItem key={opt.value} value={opt.value}>\n                    {opt.label}\n                  </MenuItem>\n                );\n              })}\n            </Select>\n          </FormControl>\n        </LineItem>\n      )}\n    />\n  );\n};\n\nconst ControlledInput: React.FC<{\n  field: keyof FormValues;\n  label: string;\n}> = ({ field, label }) => {\n  return (\n    <Controller\n      name={field}\n      defaultValue={\"\"}\n      rules={{ required: true }}\n      render={({ field }) => (\n        <LineItem>\n          <TextField\n            fullWidth\n            InputLabelProps={{ shrink: true }}\n            label={label}\n            type=\"number\"\n            variant=\"outlined\"\n            value={field.value}\n            onChange={(e) => field.onChange(e.target.value)}\n          />\n        </LineItem>\n      )}\n    />\n  );\n};\n\nfunction App() {\n  const methods = useForm<FormValues>({defaultValues:{\n    age:'',\n    asa_score:'',\n    gender:'',\n    preop_emoglobin:'',\n    surgical_indication:'',\n    treated_hta:''\n  } as any});\n  const [score, setScore] = useState<number | null>(null);\n  const onSubmit = (data: FormValues) => {\n    const score =\n      2.503 +\n      0.0506 * data.age -\n      2.896 * data.gender +\n      2.976 * data.surgical_indication +\n      0.733 * data.asa_score +\n      0.771 * data.treated_hta -\n      0.97 * data.preop_emoglobin;\n    const roundedScore = Math.round(score * 10000) / 10000;\n    setScore(roundedScore);\n  };\n  const reset = () => {\n    methods.reset();\n    setScore(null);\n  }\n\n  const doBloodDraw = !!score && score > -4.5676;\n  const resultLabel = doBloodDraw  ? `Pas faire prise de sang` : `Faire prise de sang`;\n  const resultIcon = doBloodDraw ? <ScienceIcon /> : <DoNotTouchIcon />;\n\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <AppBar position=\"static\">\n        <Toolbar>\n          <Typography variant=\"h6\" component=\"div\" sx={{ flexGrow: 1 }}>\n            Beckers score\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      <FormProvider {...methods}>\n        <form onSubmit={methods.handleSubmit(onSubmit)}>\n          <Container component=\"main\" maxWidth=\"sm\" sx={{ mb: 4 }}>\n            <Paper\n              variant=\"outlined\"\n              sx={{ my: { xs: 3, md: 6 }, p: { xs: 2, md: 3 } }}\n            >\n              <ControlledInput field=\"age\" label=\"Age\" />\n              <ControlledSelect\n                field=\"gender\"\n                label=\"Gender\"\n                options={[\n                  { label: \"Male\", value: 1 },\n                  { label: \"Female\", value: 0 },\n                ]}\n              />\n              <ControlledSelect\n                field=\"surgical_indication\"\n                label=\"Surgical Indication\"\n                options={[\n                  { label: \"Osteonecrosis\", value: 1 },\n                  { label: \"Arthritis\", value: 0 },\n                ]}\n              />\n              <ControlledSelect\n                field=\"asa_score\"\n                label=\"ASA Score\"\n                options={[\n                  { label: \"1\", value: 1 },\n                  { label: \"2\", value: 2 },\n                  { label: \"3\", value: 3 },\n                  { label: \"4\", value: 4 },\n                ]}\n              />\n              <ControlledSelect\n                field=\"treated_hta\"\n                label=\"Treated HTA\"\n                options={[\n                  { label: \"Yes\", value: 1 },\n                  { label: \"No\", value: 0 },\n                ]}\n              />\n              <ControlledInput\n                field=\"preop_emoglobin\"\n                label=\"Preop hemoglobin (g/dl)\"\n              />\n              <LineItem>\n                <Button type=\"submit\" variant=\"contained\">\n                  Calculate Score\n                </Button>\n                <Button color=\"error\" onClick={reset} variant=\"contained\">\n                  Reset\n                </Button>\n              </LineItem>\n              <LineItem>\n                {!!score ? (\n                    <Stack\n                      direction=\"row\"\n                      justifyContent=\"space-between\"\n                      divider={<Divider orientation=\"vertical\" flexItem />}\n                      spacing={2}\n                    >\n                      <Box>\n                        {resultIcon}\n                      </Box>\n                      <Box>Score: {score}</Box>\n                      <Box>{resultLabel}</Box>\n                    </Stack>\n                  ) : null}\n              </LineItem>\n            </Paper>\n          </Container>\n        </form>\n      </FormProvider>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport './App.css';\n\nReactDOM.render(\n  <React.StrictMode>\n  <App />\n</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}